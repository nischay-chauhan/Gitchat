// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id            String    @id @default(uuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    imageUrl      String?
    firstName     String?
    lastName      String?
    emailAddress  String    @unique
    credits       Int       @default(150)
    gitProjects GitProject[] 
}

model GitProject {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    projectName String
    repoUrl String

    githubToken String?

    deletedAt DateTime?

    userId String
    user User @relation(fields: [userId], references: [id])

    gitCommits GitCommit[]
    sourceCodeEmbedding SourceCodeEmbedding[]
    summarizationJobs SummarizationJob[]
}

model GitCommit{
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt


    gitProjectId String
    gitProject GitProject @relation(fields: [gitProjectId], references: [id])

    commitHash String
    commitMessage String
    commitAuthorName String
    commitAuthorAvatarUrl String
    commitDate DateTime
    summary String
}

model SourceCodeEmbedding {
    id              String   @id @default(cuid())
    summaryEmbedding Unsupported("vector(768)")?
    sourceCode      String
    fileName        String
    summary         String

    gitProjectId       String
    gitProject         GitProject  @relation(fields: [gitProjectId], references: [id])
}

enum JobType {
  COMMIT_DIFF
  SOURCE_CODE
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model SummarizationJob {
  id           String    @id @default(uuid())
  jobType      JobType
  targetId     String
  payload      Json
  status       JobStatus @default(PENDING)
  retryCount   Int       @default(0)
  errorMessage String?
  gitProjectId String
  gitProject   GitProject @relation(fields: [gitProjectId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}